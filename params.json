{
  "name": "Pdo-crud-for-free",
  "tagline": "Classes to provide MySQL PDO CRUD methods 'magically' via a simple subclassing",
  "body": "# pdo-crud-for-free\r\n\r\n\r\n[![Build Status](https://travis-ci.org/dr-matt-smith/pdo-crud-for-free.svg?branch=master)](https://travis-ci.org/dr-matt-smith/pdo-crud-for-free) [![Latest Stable Version](https://poser.pugx.org/mattsmithdev/pdo-crud-for-free/v/stable)](https://packagist.org/packages/mattsmithdev/pdo-crud-for-free) [![Total Downloads](https://poser.pugx.org/mattsmithdev/pdo-crud-for-free/downloads)](https://packagist.org/packages/mattsmithdev/pdo-crud-for-free) [![Latest Unstable Version](https://poser.pugx.org/mattsmithdev/pdo-crud-for-free/v/unstable)](https://packagist.org/packages/mattsmithdev/pdo-crud-for-free) [![License](https://poser.pugx.org/mattsmithdev/pdo-crud-for-free/license)](https://packagist.org/packages/mattsmithdev/pdo-crud-for-free)\r\n\r\n\r\nThis package provides a few classes to try to give programmers using PDO (with MySQL) in a simple way some instance CRUD (create-read-update-delete) method, 'for free', simply by subclassing **\\Mattsmithdev\\PdoCrud\\DatabaseTable**.\r\n\r\nAll code is (intended :-) to follow PSR-1, PSR-2 coding standards. Classes are following the PSR-4 autoloading standard.\r\n\r\n## Install\r\n\r\nVia Composer\r\n\r\n``` bash\r\n$ composer require mattsmithdev/pdo-crud-for-free\r\n```\r\n\r\nNOTE - until I get the hang of SemVer (and get to a 1.0.0 or later version), \r\nthen you'll need to force the dev-master download as follows:\r\n\r\n\r\n``` bash\r\n$ composer require mattsmithdev/pdo-crud-for-free=dev-master\r\n```\r\n\r\n\r\n\r\n## Usage\r\n\r\nThis example assumes you have a MySQL DB table named 'products', with columns 'id' and 'description'. You need to write a corresponding class 'Product' (note capital first letter ...).\r\n\r\n``` php\r\n\r\n// file: /src/Product.php\r\nnamespace <MyNameSpace>;\r\n\r\nclass Product extends \\Mattsmithdev\\PdoCrud\\DatabaseTable \r\n{\r\n    // private properties with EXACTLY same names as DB table columns\r\n    private $id;\r\n    private $description;\r\n    \r\n    public function getDescription()\r\n    {\r\n        return $this->description;\r\n    }\r\n}\r\n```\r\n\r\n``` php\r\n\r\n// file: /public-web/index.php or /src/SomeController->method()\r\n\r\nrequire_once __DIR__ . '/<PATH_TO_AUTLOAD>';\r\n\r\n// the DatabaseManager class needs the following 4 constants to be defined in order to create the DB connection\r\ndefine('DB_HOST', '<host>');\r\ndefine('DB_USER', '<db_username>');\r\ndefine('DB_PASS', '<db_userpassword>');\r\ndefine('DB_NAME', '<db_name>');\r\n\r\n// get all products from DB as array of Product objects\r\n$products = \\<MyNameSpace>\\Product::getAll();\r\n\r\n// outputs something like:\r\n//  hammer, nail, nuts, bolts\r\nforeach ($products as $product){\r\n    print $product->getDescription() . ', ';\r\n}\r\n```\r\n\r\nFor more details see below. Also there is a full sample web application project on GitGub at:\r\n (pdo-crud-for-free-example-project)[https://github.com/dr-matt-smith/pdo-crud-for-free-example-project]\r\n\r\n# More detailed usage instructions (and important assumptions)\r\n\r\n\r\n## ASSUMPTION 1: lowerCamelCase - DB table column names matching PHP Class properties\r\nThis tool assumes your database table column names, and their corresponding PHP private class properties are named consistently in 'lowerCamelCase'\r\ne.g.\r\n\r\n    id\r\n    title\r\n    category\r\n    price\r\n\r\n## ASSUMPTION 2: lower case plural DB table name mapping to upper case singular PHP class name\r\nIf you have a DB table '**products**' this will correspond to a PHP class '**Product**'\r\n\r\ntable names are named lower case, and are plural nouns, e.g '**users**'\r\nPHP class names are named with a capital first letter, and are singular nouns, e.g. '**User**'\r\n\r\n## ASSUMPTION 3: no constructor for your PHP classes\r\ndue to the nature of PDO populating properties of objects when DB rows are converted into object instances\r\ndo not have a constructor for the PHP classes that correspond to your DB tables\r\n\r\nso you'd create a new object, and use the objects public 'setter' methods\r\ne.g.\r\n$p = new Product();\r\n$p->setDescription('hammer');\r\n$p->setPrice(9.99);\r\netc.\r\n\r\n\r\n## step 1: create your DB tables\r\ne.g. create your tables (with integer 'id' field, primary key, auto-increment)\r\n\r\ne.g. SQL table to store DVD data\r\n\r\n    id:int (primary key, autoincrement)\r\n    title:text\r\n    category:text\r\n    price:float\r\n\r\n## step 2: create a corresponding PHP class, and subclass from Mattsmithdev\\PdoCrud\\DatabaseTable\r\ne.g.\r\n\r\n    <?php\r\n    namespace Whatever;\r\n    \r\n    use Mattsmithdev\\PdoCrud\\DatabaseTable;\r\n    \r\n        class Dvd extends DatabaseTable\r\n        {\r\n            private $id;\r\n            private $title;\r\n            private $category;\r\n            private $price;\r\n            \r\n            // and public getters and setters ...\r\n            \r\n## step 3: now use the 'magically appearing' static DB CRUD methods\r\n\r\ne.g. to get an array of all dvd records from table 'dvds' just write:\r\n\r\n    $dvds = Dvd::getAll();\r\n    \r\n\r\n## ::getAll()\r\nthis method returns an array of objects for each row of the corresponding DB table\r\ne.g.\r\n\r\n    // array of Dvd objects, populated from database table 'dvds'\r\n    $dvds = Dvd::getAll();\r\n\r\n## ::getOneById($id)\r\nthis method returns one object of class for the corresponding DB table record with the given 'id'\r\n(returns 'null' if no such record exists with that primary key id)\r\ne.g.\r\n\r\n    // one Dvd object (or 'null'), populated by row in database table 'dvds' with id=27\r\n    $dvds = Dvd::getOneById(27);\r\n\r\n## ::delete($id)\r\nthis method deletes the record corresponding to the given 'id'\r\nreturns true/false depending on success of the deletion\r\ne.g.\r\n\r\n    // delete row in database table 'dvds' with id=12\r\n    $deleteSuccess = Dvd::delete(12);\r\n    \r\n## ::insert($dvd)\r\nthis method adds a new row to the database, based on the contents of the provided object\r\n(any 'id' in this object is ignored, since the table is auto-increment, so it's left to the DB to assign a new, unique 'id' for new records)\r\nreturns the 'id' of the new record (or -1 if error when inserting)\r\ne.g.\r\n\r\n    // delete row in database table 'dvds' with id=12\r\n    $dvd = new Dvd();\r\n    $dvd->setTitle('Jaws II');\r\n    $dvd->setCategory('thriller');\r\n    $dvd->setPrice(9.99);\r\n    \r\n    // create the new Dvd row\r\n    $id = Dvd::insert($dvd);\r\n    \r\n    // decision based on success/failure of insert\r\n    if ($id < 0){\r\n        // error action\r\n    } else {\r\n        // success action\r\n    }\r\n    \r\n    \r\n## ::update($dvd)\r\nthis method adds a UPDATES an existing row in the database, based on the contents of the provided object\r\nreturns true/false depending on success of the deletion\r\n\r\ne.g.\r\n\r\n    // update DB record for object 'dvd'\r\n    $updateSuccess = Dvd:update($dvd);\r\n    \r\n            \r\n## ::searchByColumn($columnName, $searchText))\r\nperform an SQL '%' wildcard search on the given column with the given search text\r\nreturns an array of objects that match an SQL 'LIKE' query \r\n\r\ne.g.\r\n\r\n    // get all Dvds with 'jaws' in the title\r\n    $jawsDvds = Dvd::searchByColumn('title', 'jaws');\r\n\r\n## custom PDO methods\r\nIf the 'free' DB methods are insufficient, it's easy to add your own methods to your PHP classes that correspond to your DB tables.\r\n\r\nHere is a method that could be added to a class **Product** allowing a custom search by 'id' and text within 'descrition':\r\n\r\n    /**\r\n     * illustrate custom PDO DB method\r\n     * in this case we search for products with an id >= $minId, and whose descrption contains $searchText\r\n     *\r\n     * @param $minId\r\n     * @param $searchText\r\n     *\r\n     * @return array\r\n     */\r\n    public static function customSearch($minId, $searchText)\r\n    {\r\n        $db = new DatabaseManager();\r\n        $connection = $db->getDbh();\r\n\r\n        // wrap wildcard '%' around the serach text for the SQL query\r\n        $searchText = '%' . $searchText . '%';\r\n\r\n        $sql = 'SELECT * FROM products WHERE (description LIKE :searchText) AND (id > :minId)';\r\n\r\n        $statement = $connection->prepare($sql);\r\n        $statement->bindParam(':minId', $minId, \\PDO::PARAM_INT);\r\n        $statement->bindParam(':searchText', $searchText, \\PDO::PARAM_STR);\r\n        $statement->setFetchMode(\\PDO::FETCH_CLASS, '\\\\' . __CLASS__);\r\n        $statement->execute();\r\n\r\n        $products = $statement->fetchAll();\r\n\r\n        return $products;\r\n    }\r\n    \r\nand here is an example of its usage, in a controller function:\r\n\r\n    // get products from DB as array of Product objects - id > minId, description containing $searchText\r\n    $minId = 2;\r\n    $searchText = 'er';\r\n    $products = Product::customSearch($minId, $searchText);\r\n\r\n    // outputs something like:\r\n    //  [5] pliers\r\n    //  [7] hammer\r\n    foreach ($products as $product){\r\n        print '<p>';\r\n        print 'id [' . $product->getId() . '] ';\r\n        print $product->getDescription();\r\n    }\r\n\r\n    //  [1] nut -- not listed due to search criteria\r\n\r\n## Change log\r\n\r\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\r\n\r\n## Testing\r\n\r\n``` bash\r\n$ composer test\r\n```\r\n\r\n## Contributing\r\n\r\nPlease see [CONTRIBUTING](CONTRIBUTING.md) and [CONDUCT](CONDUCT.md) for details.\r\n\r\n## Security\r\n\r\nIf you discover any security related issues, please email dr_matt_smith@me.com instead of using the issue tracker.\r\n\r\n## Credits\r\n\r\n- [Matt Smith][https://github.com/dr-matt-smith]\r\n\r\n## License\r\n\r\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\r\n\r\n[ico-version]: https://img.shields.io/packagist/v/mattsmithdev/:package_name.svg?style=flat-square\r\n[ico-license]: https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\r\n[ico-travis]: https://img.shields.io/travis/mattsmithdev/:package_name/master.svg?style=flat-square\r\n[ico-scrutinizer]: https://img.shields.io/scrutinizer/coverage/g/mattsmithdev/:package_name.svg?style=flat-square\r\n[ico-code-quality]: https://img.shields.io/scrutinizer/g/mattsmithdev/:package_name.svg?style=flat-square\r\n[ico-downloads]: https://img.shields.io/packagist/dt/mattsmithdev/:package_name.svg?style=flat-square\r\n\r\n[link-packagist]: https://packagist.org/packages/mattsmithdev/:package_name\r\n[link-travis]: https://travis-ci.org/mattsmithdev/:package_name\r\n[link-scrutinizer]: https://scrutinizer-ci.com/g/mattsmithdev/:package_name/code-structure\r\n[link-code-quality]: https://scrutinizer-ci.com/g/mattsmithdev/:package_name\r\n[link-downloads]: https://packagist.org/packages/mattsmithdev/:package_name\r\n[link-author]: https://github.com/mattsmithdev\r\n[link-contributors]: ../../contributors\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}